{"version":3,"sources":["components/Navbar.js","components/TextForm.js","About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onChange","toggleMode","htmlFor","TextForm","useState","text","setText","style","backgroundcolour","color","heading","value","event","console","log","target","rows","disabled","length","onClick","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","document","getSelection","removeAllRanges","replace","split","filter","element","About","myStyle","backgroundColor","Alert","height","alert","role","msg","defaultProps","App","setMode","setAlert","e","checked","body","Date","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.fc523b5c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {              // just by writing > rfc you'll get fucntion component.\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onChange={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};","import React, { useState } from 'react'\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked .\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to the uppercase.\", \"primary\")\r\n\r\n    }\r\n    const handleDownClick = () => {\r\n        console.log(\"Lowercase was clicked .\" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to the lowercase\", \"primary\")\r\n    }\r\n    const clearText = () => {\r\n        console.log(\"Cleared the entered Text.\" + text)\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Successfully cleared text written \", \"primary\")\r\n\r\n    }\r\n    const copyText = () => {\r\n        console.log(\"copy text is .\" + text)\r\n        navigator.clipboard.writeText(text);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Successfully copied text written\", \"primary\")\r\n\r\n    }\r\n    const removeExtraSpace = () => {\r\n        console.log(\"Removed Extra spaces ,text is : \" + text)\r\n        let newText = text.replace(/\\s+/g, ' ');\r\n        setText(newText);\r\n        props.showAlert(\"Successfully removed extra spaces\", \"primary\")\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On change .\")\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // wrong way to change or edit state \r\n    // setText(\"new Text\"); // correct way to change the state #042743\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ backgroundcolour: props.mode === 'dark' ? 'Grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"container my-2\">\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" style={{ backgroundcolour: props.mode === 'dark' ? 'Grey' : 'white' }} rows=\"6\"></textarea>\r\n                        {/* // There are two curly braces because 1st is about javacsript and another is for writing an object */}\r\n                        <button disabled={text.length === 0} className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={handleUpClick}> Convert in uppercase\r\n                        </button>                                         {/*     // if Green mode is there then , apply green color instead oof white color */}\r\n                        <button disabled={text.length === 0} className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={handleDownClick}> Convert in lowercase\r\n                        </button>\r\n                        <button disabled={text.length === 0} className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={clearText}> Clear Text\r\n                        </button>\r\n                        <button disabled={text.length === 0} className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={copyText}> Copy Text\r\n                        </button>\r\n                        <button disabled={text.length === 0} className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={removeExtraSpace}> Remove extra spaces\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                        <h1> Your text summary </h1>\r\n                        {<p>{text.split(/\\s+/g).filter((element) => { return element.length }).length} words and {text.length} charcters</p>       /*// \\s+ is for multiple(due to + sign) white space chracters parsing */}\r\n                        <p>{0.008 * text.split(/\\s+/).filter((element) => { return element.length }).length} Minutes read </p>\r\n                        <h2>Preview</h2>\r\n                        <p>{text.length > 0 ? text : 'Nothing to preview .'}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white',\r\n    // });\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : '#042743',\r\n        backgroundColor: props.mode === 'dark' ? 'rgb(36 ,74, 104)' : 'white'\r\n    }\r\n    // const [btntext, setBtntext] = useState(\"Enable Light Mode\")\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color === 'black') {\r\n    //         setMyStyle({\r\n    //             border: '1px solid white',\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setBtntext(\"Enable Light Mode\")\r\n    //     }\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             border: '1px solid black',\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtntext(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\" my-2\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            <strong>Analyze Your text </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or else .\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Free To Use\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Compatible </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <button onClick={myStyle} type=\"button\" className=\"btn btn-primary my-2 mx-2\">{btntext}</button> */}\r\n            </div >\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nexport default function Alert(props) {\r\n    // const capitalize = (word) => {\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    // }\r\n    console.log('message to alert', props);\r\n    return (\r\n        <div style={{ height: ' 50px' }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                {/* This happens because all the JSX will be converted to the Javascript calls  */}\r\n                <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n}\r\n// export default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000)\n  }\n  let toggleMode = (e) => {\n    if (mode === \"light\") {\n      console.log(e.target, e.target.checked);\n      e.target.checked = true\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      // document.title = \"TextUtils - Dark Mode \";\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing.';\n      // }, 2000)\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now .';\n      // }, 1500)\n    }\n    else {\n      setMode('light');\n      e.target.checked = false\n      document.body.style.backgroundColor = \"white\";\n      document.title = \"TextUtils - Light Mode \";\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n        <Alert alert={alert} />\n        {/* <Router\n              >\n            {/* <Navbar title=\"textutils1\" aboutText=\"About Textutils \" /> */}\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\" >\n              <TextForm mode={mode} heading=\"Try TextUtils - Word counter Character Counter | uppercase to lowercase | lowerecase to uppercase | Remove Extra spaces  \" showAlert={showAlert} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n};\nexport default App;\n      // }\n      // const toggleMode = (cls) => {\n        //   console.log(cls)\n        //   document.body.classList.add('bg-' + cls)\n        //   if (mode === 'light') {\n          //     setMode('dark');\n          //     document.body.style.backgroundColor = '#042743';\n          //     showAlert('Dark mode has been enabled', 'success');\n          //   }\n          //   else {\n            //     setMode('light');\n            //     document.body.style.backgroundColor = 'white';\n            //     showAlert('Light mode has been enabled', 'success');\n            //   }\n  // }\n  // const removeBodyClasses = () => {\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-success')\n  // }\n\n  // let GreenMode = () => {\n  //   if (mode === \"light\") {\n  //     setMode('Green');\n  //     document.body.style.backgroundColor = \"#06f72f\";\n  //     document.title = \"TextUtils - Green Mode \";\n  //   }\n  //   else {\n  //     setMode('light');\n  //     document.body.style.backgroundColor = \"white\";\n  //     document.title = \"TextUtils - Light Mode \";\n  //   }\n  // }\n  // let RedMode = () => {\n  //   if (mode === \"light\") {\n  //     setMode('Red');\n  //     document.body.style.backgroundColor = \"red\";\n  //     document.title = \"TextUtils - Red Mode \";\n  //   }\n  //   else {\n  //     setMode('light');\n  //     document.body.style.backgroundColor = \"white\";\n  //     document.title = \"TextUtils - Light Mode \";\n  //   }\n  // }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//how to find curruent date\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// props and proptypes"],"sourceRoot":""}