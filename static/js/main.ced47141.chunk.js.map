{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","marginRight","onClick","toggleMode","htmlFor","GreenMode","RedMode","src","TextForm","useState","text","setText","backgroundcolour","color","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","replace","split","length","Alert","alert","role","msg","App","browser","node","setAlert","setMode","document","body","backgroundColor","setInterval","aboutText","RedMopde","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ced47141.chunk.js","sourcesContent":["// import ReactDOM from 'react-dom';\r\nimport React from 'react'\r\nimport About from '../About';\r\n// import { a, a } from 'react-router-dom';\r\n// const React = require(\"react\")\r\n// export default function Navbar({ aboutText, title }) {\r\nexport default function Navbar(props) {\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/TextForm\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-a active\" aria-current=\"page\" href=\"/TextForm\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-a active\" aria-current=\"page\" href=\"/About\" about=\"-s.about\">{About}About</a>\r\n                            </li>\r\n                            <li className=\"nav-item dropdown\">\r\n                                <a className=\"nav-a dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" >\r\n                                    Dropdown\r\n                                </a>\r\n                                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                                </ul>\r\n                            </li> */}\r\n                        </ul>\r\n                        <div style={{ marginRight: '41px' }} className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> DarkMode </label>\r\n                        </div>\r\n                        <div style={{ marginRight: '41px' }} className={`form-check form-switch text-${props.mode === 'light' ? 'Green' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.GreenMode} type=\"checkbox\" id=\"green\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"green\"> GreenMode </label>\r\n                        </div>\r\n                        <div style={{ marginRight: '41px' }} className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.RedMode} type=\"checkbox\" id=\"red\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"red\"> RedMode </label>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            < script type=\"module\" src=\"https://unpkg.com/prop-types/prop-types.min.js\" > </script>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n};","import React, { useState } from 'react'\r\nexport default function TextForm(props) {\r\n    const [alert, setAlert] = useState(null)\r\n    const showAlert = (message, type) => {\r\n        setAlert({\r\n            msg: message,\r\n            type: type,\r\n        })\r\n        setTimeout(() => {\r\n            setAlert(null);\r\n        }, 3000)\r\n    }\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked .\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to the uppercase.\", \"primary\")\r\n\r\n    }\r\n    const handleDownClick = () => {\r\n        console.log(\"Lowercase was clicked .\" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to the lowercase\", \"primary\")\r\n    }\r\n    const clearText = () => {\r\n        console.log(\"Cleared the entered Text.\" + text)\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Successfully cleared text written \", \"primary\")\r\n\r\n    }\r\n    const copyText = () => {\r\n        console.log(\"copy text is .\" + text)\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Successfully copied text written\", \"primary\")\r\n\r\n    }\r\n    const removeExtraSpace = () => {\r\n        console.log(\"Removed Extra spaces ,text is : \" + text)\r\n        let newText = text.replace(/\\s+/g, ' ');\r\n        setText(newText);\r\n        props.showAlert(\"Successfully removed extra spaces\", \"primary\")\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On change .\")\r\n        setText(event.target.value)\r\n\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // wrong way to change or edit state \r\n    // setText(\"new Text\"); // correct way to change the state #042743\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ backgroundcolour: props.mode === 'dark' ? 'Grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"container my-2\">\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" style={{ backgroundcolour: props.mode === 'dark' ? 'Grey' : 'white' }} rows=\"6\"></textarea>\r\n                        {/* // There are two curly braces because 1st is about javacsript and another is for writing an object */}\r\n                        <button className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={handleUpClick}> Convert in uppercase\r\n                        </button>                                         {/*     // if Green mode is there then , apply green color instead oof white color */}\r\n                        <button className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={handleDownClick}> Convert in lowercase\r\n                        </button>\r\n                        <button className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={clearText}> Clear Text\r\n                        </button>\r\n                        <button className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={copyText}> Copy Text\r\n                        </button>\r\n                        <button className={`btn btn-${props.mode === 'Green' ? 'primary' : 'info' && props.mode === 'Red' ? 'warning' : 'info' && props.mode === 'dark' ? 'secondary' : 'info'} my-2 mx-2`} onClick={removeExtraSpace}> Remove extra spaces\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                        <h1> Your text summary </h1>\r\n                        <p>{text.split(\" \").length} words and {text.length} charcters</p>\r\n                        <p>{0.008 * text.split(\" \").length} Minutes read </p>\r\n                        <h2>Preview</h2>\r\n                        <p>{text.length > 0 ? text : 'Enter something in the textbox to Preview it here .'}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    console.log('messagt to alert', props);\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {/* This happens because all the JSX will be converted to the Javascript calls  */}\r\n            <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n\r\n}\r\n// export default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\n\nimport About from './About';\nlet name = \"Vedant\";\nfunction App(browser, node) {\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000)\n  }\n  let toggleMode = () => {\n    if (mode === \"light\") {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      document.title = \"TextUtils - Dark Mode \";\n      setInterval(() => {\n        document.title = 'TextUtils is amazing.';\n      }, 2000)\n      setInterval(() => {\n        document.title = 'Install TextUtils Now .';\n      }, 1500)\n\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      document.title = \"TextUtils - Light Mode \";\n\n\n    }\n\n  }\n  let GreenMode = () => {\n    if (mode === \"light\") {\n      setMode('Green');\n      document.body.style.backgroundColor = \"#06f72f\";\n      document.title = \"TextUtils - Green Mode \";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      document.title = \"TextUtils - Light Mode \";\n\n\n    }\n\n  }\n  let RedMode = () => {\n    if (mode === \"light\") {\n      setMode('Red');\n      document.body.style.backgroundColor = \"red\";\n      document.title = \"TextUtils - Red Mode \";\n\n\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      document.title = \"TextUtils - Light Mode \";\n\n\n    }\n\n  }\n  let [mode, setMode] = useState('light') // whether dark mode is enabled or not .\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} GreenMode={GreenMode} RedMode={RedMode} toggleMode={toggleMode} aboutText=\"About \" />\n      {/* <Router>\n        {/* <Navbar title=\"textutils1\" aboutText=\"About Textutils \" /> */}\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm mode={mode} GreenMode={GreenMode} RedMopde={RedMode} showAlert={showAlert} heading=\"Enter test to analyze \" />\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n\n        {/* <Route exact path=\"/TextForm\" >\n\n            </Route>\n          </Switch> */}\n      </div>\n      {/* // </Router> */}\n    </>\n  );\n\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// props and proptypes"],"sourceRoot":""}